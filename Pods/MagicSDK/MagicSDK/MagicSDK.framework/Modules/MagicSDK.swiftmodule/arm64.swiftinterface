// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MagicSDK
import Foundation
@_exported import MagicSDK
import MagicSDK_Web3
import PromiseKit
import Rollbar
import Swift
import UIKit
import WebKit
public struct AnyValue : Swift.Codable {
  public let valueType: MagicSDK.AnyValue.ValueType
  public enum ValueType {
    case string(Swift.String)
    case int(Swift.Int)
    case bool(Swift.Bool)
    case array([MagicSDK.AnyValue])
    case `nil`
  }
  public init(valueType: MagicSDK.AnyValue.ValueType)
  public init(from decoder: Swift.Decoder) throws
  public enum Error : Swift.Error {
    case unsupportedType
    public static func == (a: MagicSDK.AnyValue.Error, b: MagicSDK.AnyValue.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
}
extension AnyValue : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public init(stringLiteral value: MagicSDK.AnyValue.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = MagicSDK.AnyValue.StringLiteralType
  public typealias UnicodeScalarLiteralType = MagicSDK.AnyValue.StringLiteralType
}
extension AnyValue : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
  public init(integerLiteral value: MagicSDK.AnyValue.IntegerLiteralType)
}
extension AnyValue : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
  public init(booleanLiteral value: MagicSDK.AnyValue.BooleanLiteralType)
}
extension AnyValue : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = MagicSDK.AnyValueRepresentable
  public init(array: [MagicSDK.AnyValueRepresentable])
  public init(arrayLiteral elements: MagicSDK.AnyValue.ArrayLiteralElement...)
}
extension AnyValue {
  public static func string(_ string: Swift.String) -> MagicSDK.AnyValue
  public static func int(_ int: Swift.Int) -> MagicSDK.AnyValue
  public static func bool(_ bool: Swift.Bool) -> MagicSDK.AnyValue
  public static func array(_ array: [MagicSDK.AnyValueRepresentable]) -> MagicSDK.AnyValue
}
extension AnyValue {
  public var string: Swift.String? {
    get
  }
  public var int: Swift.Int? {
    get
  }
  public var bool: Swift.Bool? {
    get
  }
  public var array: [MagicSDK.AnyValue]? {
    get
  }
}
extension AnyValue : MagicSDK.AnyValueConvertible {
  public init(anyValue: MagicSDK.AnyValue)
  public func anyValue() -> MagicSDK.AnyValue
}
extension AnyValue.ValueType : Swift.Equatable {
  public static func == (lhs: MagicSDK.AnyValue.ValueType, rhs: MagicSDK.AnyValue.ValueType) -> Swift.Bool
}
extension AnyValue : Swift.Equatable {
  public static func == (lhs: MagicSDK.AnyValue, rhs: MagicSDK.AnyValue) -> Swift.Bool
}
extension AnyValue.ValueType : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension AnyValue : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AnyValueRepresentable : Swift.Encodable {
  func anyValue() -> MagicSDK.AnyValue
}
public protocol AnyValueInitializable : Swift.Decodable {
  init(anyValue: MagicSDK.AnyValue) throws
}
public typealias AnyValueConvertible = MagicSDK.AnyValueInitializable & MagicSDK.AnyValueRepresentable
extension AnyValueInitializable {
  public init(anyValue: MagicSDK.AnyValueRepresentable) throws
}
extension AnyValueRepresentable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension AnyValueInitializable {
  public init(from decoder: Swift.Decoder) throws
}
public enum AnyValueRepresentableError : Swift.Error {
  case notRepresentable
  public static func == (a: MagicSDK.AnyValueRepresentableError, b: MagicSDK.AnyValueRepresentableError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AnyValueInitializableError : Swift.Error {
  case notInitializable
  public static func == (a: MagicSDK.AnyValueInitializableError, b: MagicSDK.AnyValueInitializableError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct LoginWithMagicLinkConfiguration : MagicSDK.BaseConfiguration {
  public var showUI: Swift.Bool
  public var email: Swift.String
  public init(showUI: Swift.Bool = true, email: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers public class AuthModule : MagicSDK.BaseModule {
  public func loginWithMagicLink(_ configuration: MagicSDK.LoginWithMagicLinkConfiguration, response: @escaping MagicSDK.Web3ResponseCompletion<Swift.String>)
  public func loginWithMagicLink(_ configuration: MagicSDK.LoginWithMagicLinkConfiguration) -> PromiseKit.Promise<Swift.String>
  public func loginWithMagicLink(_ configuration: MagicSDK.LoginWithMagicLinkConfiguration, eventLog: Swift.Bool) -> MagicSDK.MagicEventPromise<Swift.String>
  public enum LoginWithMagicLinkEvent : Swift.String {
    case emailNotDeliverable
    case emailSent
    case retry
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  override public init(rpcProvider: MagicSDK.RpcProvider)
  @objc deinit
}
public protocol BaseConfiguration : Swift.Decodable, Swift.Encodable {
}
open class BaseModule {
  final public let provider: MagicSDK.RpcProvider
  final public let magicEventCenter: MagicSDK.EventCenter
  public init(rpcProvider: MagicSDK.RpcProvider)
  @objc deinit
}
public func promiseResolver<T>(_ resolver: PromiseKit.Resolver<T>) -> (MagicSDK_Web3.Web3Response<T>) -> Swift.Void where T : Swift.Decodable, T : Swift.Encodable
public struct EIP712TypedData : Swift.Codable, Swift.Equatable {
  public struct `Type` : Swift.Codable, Swift.Equatable {
    public static func == (a: MagicSDK.EIP712TypedData.`Type`, b: MagicSDK.EIP712TypedData.`Type`) -> Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Domain : Swift.Codable, Swift.Equatable {
    public static func == (a: MagicSDK.EIP712TypedData.Domain, b: MagicSDK.EIP712TypedData.Domain) -> Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public let types: Swift.Dictionary<Swift.String, Swift.Array<MagicSDK.EIP712TypedData.`Type`>>
  public let primaryType: Swift.String
  public let domain: MagicSDK.EIP712TypedData.Domain
  public let message: Swift.Dictionary<Swift.String, MagicSDK.JSONValue>
  public init(primaryType: Swift.String, domain: MagicSDK.EIP712TypedData.Domain, types: Swift.Dictionary<Swift.String, Swift.Array<MagicSDK.EIP712TypedData.`Type`>>, message: Swift.Dictionary<Swift.String, MagicSDK.JSONValue>)
  public static func == (a: MagicSDK.EIP712TypedData, b: MagicSDK.EIP712TypedData) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SignTypedDataCallParams : Swift.Codable, Swift.Equatable {
  public let account: MagicSDK_Web3.EthereumAddress
  public let data: MagicSDK.EIP712TypedData
  public init(account: MagicSDK_Web3.EthereumAddress, data: MagicSDK.EIP712TypedData)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: MagicSDK.SignTypedDataCallParams, b: MagicSDK.SignTypedDataCallParams) -> Swift.Bool
}
public struct EIP712TypedDataLegacyFields : Swift.Codable, Swift.Equatable {
  public let type: Swift.String
  public let name: Swift.String
  public let value: Swift.String
  public init(type: Swift.String, name: Swift.String, value: Swift.String)
  public static func == (a: MagicSDK.EIP712TypedDataLegacyFields, b: MagicSDK.EIP712TypedDataLegacyFields) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SignTypedDataLegacyCallParams : Swift.Codable, Swift.Equatable {
  public let data: [MagicSDK.EIP712TypedDataLegacyFields]
  public let account: MagicSDK_Web3.EthereumAddress
  public init(data: [MagicSDK.EIP712TypedDataLegacyFields], account: MagicSDK_Web3.EthereumAddress)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: MagicSDK.SignTypedDataLegacyCallParams, b: MagicSDK.SignTypedDataLegacyCallParams) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class EventCenter {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MagicEventPromise<T> {
  public func once(eventName: Swift.String, completion: @escaping () -> Swift.Void) -> MagicSDK.MagicEventPromise<T>
  public func done(on: Dispatch.DispatchQueue? = conf.Q.return, flags: Dispatch.DispatchWorkItemFlags? = nil, _ body: @escaping (T) throws -> Swift.Void) -> PromiseKit.Promise<Swift.Void>
  @objc deinit
}
public enum JSONValue : Swift.Equatable {
  case null
  case bool(Swift.Bool)
  case number(Swift.Double)
  case string(Swift.String)
  case array(Swift.Array<MagicSDK.JSONValue>)
  case object(Swift.Dictionary<Swift.String, MagicSDK.JSONValue>)
  public static func == (a: MagicSDK.JSONValue, b: MagicSDK.JSONValue) -> Swift.Bool
}
extension JSONValue : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension JSONValue : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension JSONValue {
  public var string: Swift.String? {
    get
  }
  public var number: Swift.Double? {
    get
  }
  public var bool: Swift.Bool? {
    get
  }
  public var objec: Swift.Dictionary<Swift.String, MagicSDK.JSONValue>? {
    get
  }
  public var array: Swift.Array<MagicSDK.JSONValue>? {
    get
  }
  public var isNull: Swift.Bool {
    get
  }
  public subscript(index: Swift.Int) -> MagicSDK.JSONValue? {
    get
  }
  public subscript(key: Swift.String) -> MagicSDK.JSONValue? {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class Magic : ObjectiveC.NSObject {
  final public let user: MagicSDK.UserModule
  final public let auth: MagicSDK.AuthModule
  public var rpcProvider: MagicSDK.RpcProvider
  public static var shared: MagicSDK.Magic!
  convenience public init(apiKey: Swift.String, network: MagicSDK.EthNetwork, locale: Swift.String = Locale.current.identifier)
  convenience public init(apiKey: Swift.String, customNode: MagicSDK.CustomNodeConfiguration, locale: Swift.String = Locale.current.identifier)
  convenience public init(apiKey: Swift.String, locale: Swift.String = Locale.current.identifier)
  @objc override dynamic public init()
  @objc deinit
}
extension Web3Response {
  public var magicAuthError: MagicSDK.RpcProvider.ProviderError? {
    get
  }
}
@_hasMissingDesignatedInitializers public class NetworkClient {
  public enum Error : Swift.Error {
    case unexpectedResponse(Swift.Error?)
    case invalidResponseCode
  }
  public var headers: [Swift.String : Swift.String]
  @objc deinit
}
public func generateRandomId() -> Swift.Int
public func btoa(jsonString: Swift.String) -> Swift.String
public func handleRollbarError(_ error: Swift.Error, extraData: Swift.String = "", log: Swift.Bool = true)
@_hasMissingDesignatedInitializers public class RpcProvider : MagicSDK.NetworkClient, MagicSDK_Web3.Web3Provider {
  public enum ProviderError : Swift.Error {
    case encodingFailed(Swift.Error?)
    case decodingFailed(json: Swift.String)
    case invalidJsonResponse(json: Swift.String)
    case missingPayloadCallback(json: Swift.String)
  }
  final public let urlBuilder: MagicSDK.URLBuilder
  public func send<Params, Result>(request: MagicSDK_Web3.RPCRequest<Params>, response: @escaping MagicSDK.Web3ResponseCompletion<Result>) where Params : Swift.Decodable, Params : Swift.Encodable, Result : Swift.Decodable, Result : Swift.Encodable
  @objc deinit
}
public typealias Web3ResponseCompletion<Result> = (MagicSDK_Web3.Web3Response<Result>) -> Swift.Void where Result : Swift.Decodable, Result : Swift.Encodable
public struct URLBuilder {
  public let apiKey: Swift.String
}
public struct CustomNodeConfiguration : Swift.Encodable {
  public init(rpcUrl: Swift.String, chainId: Swift.Int? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public class GetIdTokenConfiguration : MagicSDK.BaseConfiguration {
  public init(lifespan: Swift.Int = 900)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class GenerateIdTokenConfiguration : MagicSDK.BaseConfiguration {
  public init(lifespan: Swift.Int = 900, attachment: Swift.String = "none")
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class UpdateEmailConfiguration : MagicSDK.BaseConfiguration {
  public init(email: Swift.String, showUI: Swift.Bool = true)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers public class UserModule : MagicSDK.BaseModule {
  public func getIdToken(_ configuration: MagicSDK.GetIdTokenConfiguration? = nil, response: @escaping MagicSDK.Web3ResponseCompletion<Swift.String>)
  public func getIdToken(_ configuration: MagicSDK.GetIdTokenConfiguration? = nil) -> PromiseKit.Promise<Swift.String>
  public func generateIdToken(_ configuration: MagicSDK.GenerateIdTokenConfiguration? = nil, response: @escaping MagicSDK.Web3ResponseCompletion<Swift.String>)
  public func generateIdToken(_ configuration: MagicSDK.GenerateIdTokenConfiguration? = nil) -> PromiseKit.Promise<Swift.String>
  public func getMetadata(response: @escaping MagicSDK.Web3ResponseCompletion<MagicSDK.UserMetadata>)
  public func getMetadata() -> PromiseKit.Promise<MagicSDK.UserMetadata>
  public func isLoggedIn(response: @escaping MagicSDK.Web3ResponseCompletion<Swift.Bool>)
  public func isLoggedIn() -> PromiseKit.Promise<Swift.Bool>
  public func updateEmail(_ configuration: MagicSDK.UpdateEmailConfiguration, response: @escaping MagicSDK.Web3ResponseCompletion<Swift.Bool>)
  public func updateEmail(_ configuration: MagicSDK.UpdateEmailConfiguration) -> PromiseKit.Promise<Swift.Bool>
  public func updateEmail(_ configuration: MagicSDK.UpdateEmailConfiguration, eventLog: Swift.Bool) -> MagicSDK.MagicEventPromise<Swift.Bool>
  public func logout(response: @escaping MagicSDK.Web3ResponseCompletion<Swift.Bool>)
  public func logout() -> PromiseKit.Promise<Swift.Bool>
  override public init(rpcProvider: MagicSDK.RpcProvider)
  @objc deinit
}
public protocol MagicResponse : Swift.Decodable, Swift.Encodable {
}
public struct UserMetadata : MagicSDK.MagicResponse {
  public let issuer: Swift.String?
  public let publicAddress: Swift.String?
  public let email: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Web3.Eth {
  public func getCoinbase(response: @escaping MagicSDK_Web3.Web3.Web3ResponseCompletion<MagicSDK_Web3.EthereumAddress>)
  public func sign(from: MagicSDK_Web3.EthereumAddress, message: MagicSDK_Web3.EthereumData, response: @escaping MagicSDK_Web3.Web3.Web3ResponseCompletion<MagicSDK_Web3.EthereumData>)
  public func signTypedDataV1(data: [MagicSDK.EIP712TypedDataLegacyFields], account: MagicSDK_Web3.EthereumAddress, response: @escaping MagicSDK.Web3ResponseCompletion<MagicSDK_Web3.EthereumData>)
  public func signTypedDataV3(account: MagicSDK_Web3.EthereumAddress, data: MagicSDK.EIP712TypedData, response: @escaping MagicSDK.Web3ResponseCompletion<MagicSDK_Web3.EthereumData>)
}
extension Web3.Eth {
  public func getCoinbase() -> PromiseKit.Promise<MagicSDK_Web3.EthereumAddress>
  public func sign(from: MagicSDK_Web3.EthereumAddress, message: MagicSDK_Web3.EthereumData) -> PromiseKit.Promise<MagicSDK_Web3.EthereumData>
  public func signTypedDataLegacy(account: MagicSDK_Web3.EthereumAddress, data: [MagicSDK.EIP712TypedDataLegacyFields]) -> PromiseKit.Promise<MagicSDK_Web3.EthereumData>
  public func signTypedData(account: MagicSDK_Web3.EthereumAddress, data: MagicSDK.EIP712TypedData) -> PromiseKit.Promise<MagicSDK_Web3.EthereumData>
}
extension RPCRequest {
  public init(method: Swift.String, params: Params)
}
public enum EthNetwork : Swift.String {
  case mainnet
  case kovan
  case rinkeby
  case ropsten
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension MagicSDK.AnyValue.Error : Swift.Equatable {}
extension MagicSDK.AnyValue.Error : Swift.Hashable {}
extension MagicSDK.AnyValueRepresentableError : Swift.Equatable {}
extension MagicSDK.AnyValueRepresentableError : Swift.Hashable {}
extension MagicSDK.AnyValueInitializableError : Swift.Equatable {}
extension MagicSDK.AnyValueInitializableError : Swift.Hashable {}
extension MagicSDK.AuthModule.LoginWithMagicLinkEvent : Swift.Equatable {}
extension MagicSDK.AuthModule.LoginWithMagicLinkEvent : Swift.Hashable {}
extension MagicSDK.AuthModule.LoginWithMagicLinkEvent : Swift.RawRepresentable {}
extension MagicSDK.EthNetwork : Swift.Equatable {}
extension MagicSDK.EthNetwork : Swift.Hashable {}
extension MagicSDK.EthNetwork : Swift.RawRepresentable {}
